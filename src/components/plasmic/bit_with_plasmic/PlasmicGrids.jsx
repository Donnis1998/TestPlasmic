// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nMYeLQHQshrX7VNJy72yBY
// Component: krqvzhldj2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { GridControl } from "../../BSGridControl"; // plasmic-import: DsRyq4yWTE/codeComponent
import { BsButton } from "../../BSButton"; // plasmic-import: T7xM5W3zCF/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_bit_with_plasmic.module.css"; // plasmic-import: nMYeLQHQshrX7VNJy72yBY/projectcss
import sty from "./PlasmicGrids.module.css"; // plasmic-import: krqvzhldj2/css

export const PlasmicGrids__VariantProps = new Array();

export const PlasmicGrids__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicGrids__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              sty.root
            )}
          >
            <div className={classNames(projectcss.all, sty.freeBox___1MvRq)}>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Bsoft Solutions"}
              </div>
            </div>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column___5WFwC)} />
              <div className={classNames(projectcss.all, sty.column__poCw0)}>
                <GridControl
                  data-plasmic-name={"gridControl"}
                  data-plasmic-override={overrides.gridControl}
                  allowPaging={true}
                  className={classNames("__wab_instance", sty.gridControl)}
                  dataSource={[
                    {
                      ProductID: 10250,
                      ProductName: "Sandia",
                      QuantityPerUnit: 12,
                      PurchaseDate: "2022-07-1",
                      UnitPrice: 30.5,
                      UnitsInStock: 20
                    },
                    {
                      ProductID: 10251,
                      ProductName: "Manzana",
                      QuantityPerUnit: 20,
                      PurchaseDate: "2022-07-2",
                      UnitPrice: 15.5,
                      UnitsInStock: 25
                    }
                  ]}
                  enableFrozenCommand={true}
                  gridData={{
                    columns: [
                      { field: "ProductID", width: 250 },
                      { field: "ProductName", width: 250 },
                      { field: "QuantityPerUnit", width: 250 },
                      { field: "PurchaseDate", width: 250 },
                      { field: "UnitPrice", width: 250 },
                      { field: "UnitsInStock", width: 250 }
                    ]
                  }}
                  height={300}
                  width={1024}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___1Ai9Q)} />
              <div className={classNames(projectcss.all, sty.column__w649B)} />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__leJy)}>
              <BsButton
                data-plasmic-name={"bsButton"}
                data-plasmic-override={overrides.bsButton}
                className={classNames("__wab_instance", sty.bsButton)}
                color={"primary"}
                content={"button"}
              />
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "columns", "gridControl", "bsButton"],
  text: ["text"],
  columns: ["columns", "gridControl"],
  gridControl: ["gridControl"],
  bsButton: ["bsButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGrids__ArgProps,
          internalVariantPropNames: PlasmicGrids__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGrids__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGrids";
  } else {
    func.displayName = `PlasmicGrids.${nodeName}`;
  }
  return func;
}

export const PlasmicGrids = Object.assign(
  // Top-level PlasmicGrids renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    columns: makeNodeComponent("columns"),
    gridControl: makeNodeComponent("gridControl"),
    bsButton: makeNodeComponent("bsButton"),
    // Metadata about props expected for PlasmicGrids
    internalVariantProps: PlasmicGrids__VariantProps,
    internalArgProps: PlasmicGrids__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGrids;
/* prettier-ignore-end */
